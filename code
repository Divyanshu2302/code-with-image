import React, { useState, useEffect } from 'react';

// --- Reusable SVG Icons ---
const MapPinIcon = ({ className }) => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path><circle cx="12" cy="10" r="3"></circle></svg>);
const EditIcon = ({ className }) => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>);
const CheckCircleIcon = ({ className }) => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>);
const UserIcon = ({ className }) => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>);
const ShieldIcon = ({ className }) => (<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>);

// --- Initial Data ---
const initialReports = [
    { id: 1, type: 'Waste Dumping', description: 'Overflowing bins near India Gate.', lat: 28.6129, lng: 77.2295, status: 'Reported' },
    { id: 2, type: 'Broken Streetlight', description: 'Light out near Connaught Place.', lat: 28.6330, lng: 77.2196, status: 'In Progress' },
    { id: 3, type: 'Pothole', description: 'Large pothole near Red Fort.', lat: 28.6562, lng: 77.2410, status: 'Resolved' }
];


// --- Sub-Components ---

const Header = () => (
    <header className="bg-white/80 shadow-sm p-4 z-10 backdrop-blur-sm sticky top-0">
        <div className="container mx-auto text-center">
            <h1 className="text-3xl md:text-4xl font-bold header-gradient">Urban Greenscape Navigator</h1>
            <p className="text-slate-500 mt-1">Your Community's Pathway to a Sustainable Future</p>
        </div>
    </header>
);

const StaticMapComponent = () => (
    <div className="lg:col-span-3 bg-white rounded-xl shadow-lg p-4 flex flex-col">
        <h2 className="text-xl font-semibold mb-3 flex items-center">
            <MapPinIcon className="text-green-600 mr-2" />
            Community Issue Map
        </h2>
        <div className="w-full aspect-video rounded-lg overflow-hidden border-2 border-slate-200">
            {/* This now points to the image in your public folder */}
            <img
                src="/map-placeholder.png"
                alt="Static map of Delhi with civic issue reports"
                className="w-full h-full object-cover"
            />
        </div>
        <p className="text-sm text-slate-500 mt-2 text-center">This is a static representation of the live map.</p>
    </div>
);


const ReportForm = ({ onSubmit, onCancel, onGeolocate }) => {
    const [formData, setFormData] = useState({ 'issue-type': 'Waste Dumping', description: '' });
    const handleChange = (e) => { const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: value })); };
    const handleSubmit = (e) => { e.preventDefault(); if (!formData.description) { console.error("Description is required."); return; } onSubmit(formData); };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <h3 className="text-xl font-semibold">New Issue Report</h3>
            <div>
                <label htmlFor="issue-type" className="block text-sm font-medium text-slate-700">Type of Issue</label>
                <select id="issue-type" name="issue-type" value={formData['issue-type']} onChange={handleChange} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-slate-300 focus:outline-none focus:ring-green-500 focus:border-green-500 sm:text-sm rounded-md" required>
                    <option>Waste Dumping</option> <option>Broken Streetlight</option> <option>Overgrown Vegetation</option> <option>Pothole</option> <option>Vandalism</option> <option>Other</option>
                </select>
            </div>
            <div>
                <label htmlFor="description" className="block text-sm font-medium text-slate-700">Description</label>
                <textarea id="description" name="description" rows="3" value={formData.description} onChange={handleChange} className="mt-1 shadow-sm focus:ring-green-500 focus:border-green-500 block w-full sm:text-sm border border-slate-300 rounded-md p-2" placeholder="e.g., Large pile of trash bags..." required></textarea>
            </div>
            <div>
                <button type="button" onClick={onGeolocate} className="w-full flex justify-center items-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <MapPinIcon className="mr-2 h-5 w-5" /> Use My Current Location
                </button>
            </div>
            <div className="flex space-x-2 pt-2">
                <button type="button" onClick={onCancel} className="w-1/2 bg-slate-200 text-slate-800 font-bold py-2 px-4 rounded-lg hover:bg-slate-300">Cancel</button>
                <button type="submit" className="w-1/2 bg-green-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700">Submit Report</button>
            </div>
        </form>
    );
};

const SuccessToast = ({ isVisible, message }) => {
    if (!isVisible) return null;
    return (
        <div className="fixed bottom-5 right-5 bg-emerald-500 text-white py-3 px-6 rounded-lg shadow-xl flex items-center fade-in-out z-50">
            <CheckCircleIcon className="mr-3" />
            <span className="font-semibold">{message}</span>
        </div>
    );
};

// --- Page-Level Components ---

const LoginPage = ({ onLogin }) => {
    return (
        <div className="min-h-screen w-full flex flex-col bg-slate-50">
            <Header />
            <main className="flex-grow container mx-auto flex flex-col justify-center items-center p-4">
                <div className="w-full max-w-4xl">
                    <h2 className="text-2xl font-bold text-center text-slate-700 mb-8">Welcome! Please select your portal.</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                        <div className="bg-white rounded-xl shadow-lg p-8 flex flex-col items-center text-center grow-subtle">
                            <UserIcon className="w-16 h-16 text-green-600 mb-4" />
                            <h3 className="text-xl font-semibold mb-2">Community Residents</h3>
                            <p className="text-slate-500 mb-6">Report issues, track progress, and help improve our city together.</p>
                            <button onClick={() => onLogin('resident')} className="w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-700 transition-all duration-300 flex items-center justify-center text-lg">Login as Resident</button>
                        </div>
                        <div className="bg-white rounded-xl shadow-lg p-8 flex flex-col items-center text-center grow-subtle">
                            <ShieldIcon className="w-16 h-16 text-blue-600 mb-4" />
                            <h3 className="text-xl font-semibold mb-2">Municipal Authorities</h3>
                            <p className="text-slate-500 mb-6">Access the dashboard to manage, assign, and resolve reported civic issues.</p>
                            <button onClick={() => onLogin('authority')} className="w-full bg-blue-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-blue-700 transition-all duration-300 flex items-center justify-center text-lg">Login as Authority</button>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    );
};

const Dashboard = ({ reports, handleAddReport, handleCancelForm, handleShowForm, handleGeolocate, isFormVisible }) => (
    <div className="min-h-screen flex flex-col bg-slate-50 font-sans text-slate-800">
        <Header />
        <main className="container mx-auto p-4 lg:p-8 flex-grow grid grid-cols-1 lg:grid-cols-5 gap-8">
            <StaticMapComponent />
            <div className="lg:col-span-2 bg-white rounded-xl shadow-lg p-6 flex flex-col">
                {isFormVisible ? ( <ReportForm onSubmit={handleAddReport} onCancel={handleCancelForm} onGeolocate={handleGeolocate} /> ) : (
                    <>
                        <div id="welcome-message">
                            <h2 className="text-2xl font-bold mb-2">Help Build a Greener City!</h2>
                            <p className="text-slate-600 mb-4">Click the button below to describe a problem or use your location to pinpoint an issue.</p>
                            <button onClick={handleShowForm} className="w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-700 transition-all duration-300 flex items-center justify-center text-lg grow-subtle">
                                <EditIcon className="mr-2" /> Report an Issue
                            </button>
                        </div>
                        <hr className="my-6 border-slate-200" />
                        <div className="flex-grow flex flex-col min-h-0">
                            <h3 className="text-xl font-semibold mb-3">Recently Reported</h3>
                            <div id="reports-list" className="flex-grow overflow-y-auto pr-2 space-y-3">
                                {[...reports].reverse().map(report => (
                                    <div key={report.id} className="p-3 rounded-lg border border-slate-200 grow-subtle">
                                        <div className="flex justify-between items-start">
                                            <h4 className="font-semibold text-slate-800">{report.type}</h4>
                                            <span className={`text-xs font-bold px-2 py-1 rounded-full ${ report.status === 'In Progress' ? 'bg-blue-100 text-blue-800' : report.status === 'Resolved' ? 'bg-green-100 text-green-800' : 'bg-amber-100 text-amber-800' }`}>
                                                {report.status}
                                            </span>
                                        </div>
                                        <p className="text-sm text-slate-600 mt-1">{report.description}</p>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </>
                )}
            </div>
        </main>
    </div>
);

const AuthorityDashboard = ({ reports, handleUpdateStatus }) => {
    const StatusSelector = ({ currentStatus, reportId }) => (
        <select
            value={currentStatus}
            onChange={(e) => handleUpdateStatus(reportId, e.target.value)}
            className="block w-full pl-3 pr-10 py-2 text-base border-slate-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
            aria-label={`Update status for report ${reportId}`}
        >
            <option>Reported</option>
            <option>In Progress</option>
            <option>Resolved</option>
        </select>
    );

    return (
        <div className="min-h-screen flex flex-col bg-slate-50 font-sans text-slate-800">
            <Header />
            <main className="container mx-auto p-4 lg:p-8 flex-grow">
                <div className="bg-white rounded-xl shadow-lg p-4 sm:p-6">
                    <h2 className="text-2xl sm:text-3xl font-bold mb-6 text-slate-700">Authority Dashboard: Manage Reports</h2>
                    <div className="overflow-x-auto">
                        <table className="w-full text-left table-auto">
                            <thead>
                            <tr className="border-b">
                                <th className="p-3 text-sm font-semibold uppercase text-slate-500">Type</th>
                                <th className="p-3 text-sm font-semibold uppercase text-slate-500">Description</th>
                                <th className="p-3 text-sm font-semibold uppercase text-slate-500 hidden md:table-cell">Location (Lat, Lng)</th>
                                <th className="p-3 text-sm font-semibold uppercase text-slate-500">Status</th>
                            </tr>
                            </thead>
                            <tbody>
                            {reports.length > 0 ? [...reports].reverse().map(report => (
                                <tr key={report.id} className="border-b hover:bg-slate-50">
                                    <td className="p-3 font-medium align-top">{report.type}</td>
                                    <td className="p-3 text-slate-600 align-top max-w-xs">{report.description}</td>
                                    <td className="p-3 text-slate-600 align-top hidden md:table-cell font-mono text-sm">{report.lat.toFixed(4)}, {report.lng.toFixed(4)}</td>
                                    <td className="p-3 align-top"><StatusSelector currentStatus={report.status} reportId={report.id} /></td>
                                </tr>
                            )) : (
                                <tr><td colSpan="4" className="text-center p-6 text-slate-500">No reports found.</td></tr>
                            )}
                            </tbody>
                        </table>
                    </div>
                </div>
            </main>
        </div>
    );
};

// --- Main App Component ---

export default function App() {
    const StyleInjector = () => (
        <style>{`
            .fade-in-out { animation: fadeInOut 4s ease-in-out forwards; } @keyframes fadeInOut { 0%, 100% { opacity: 0; transform: translateY(20px); } 10%, 90% { opacity: 1; transform: translateY(0); } }
            .grow-subtle { transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94); } .grow-subtle:hover { transform: scale(1.03); }
            .header-gradient { background: linear-gradient(to right, #16a34a, #059669); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; text-fill-color: transparent; }
        `}</style>
    );

    // --- State Management ---
    const [reports, setReports] = useState(() => {
        try {
            const savedReports = localStorage.getItem('urbanGreenscapeReports');
            return savedReports ? JSON.parse(savedReports) : initialReports;
        } catch (error) {
            console.error("Could not parse reports from localStorage", error);
            return initialReports;
        }
    });

    const [isFormVisible, setIsFormVisible] = useState(false);
    const [isToastVisible, setIsToastVisible] = useState(false);
    const [toastMessage, setToastMessage] = useState('');
    const [userRole, setUserRole] = useState(null);
    const [newPinLocation, setNewPinLocation] = useState(null);

    // --- Effects ---
    useEffect(() => {
        localStorage.setItem('urbanGreenscapeReports', JSON.stringify(reports));
    }, [reports]);

    useEffect(() => {
        if (isToastVisible) {
            const timer = setTimeout(() => setIsToastVisible(false), 4000);
            return () => clearTimeout(timer);
        }
    }, [isToastVisible]);

    // --- Handler Functions ---
    const handleAddReport = (formData) => {
        if (!newPinLocation) {
            alert("Please use 'Use My Current Location' to add a location before submitting.");
            return;
        }
        const newReport = { id: Date.now(), type: formData['issue-type'], description: formData.description, lat: newPinLocation.lat, lng: newPinLocation.lng, status: 'Reported' };
        setReports(prev => [...prev, newReport]);
        setIsFormVisible(false);
        setNewPinLocation(null);
        setToastMessage("Report submitted! You've earned 20 points.");
        setIsToastVisible(true);
    };

    const handleUpdateStatus = (reportId, newStatus) => {
        setReports(prevReports =>
            prevReports.map(report =>
                report.id === reportId ? { ...report, status: newStatus } : report
            )
        );
        setToastMessage(`Report #${reportId} status updated.`);
        setIsToastVisible(true);
    };

    const handleGeolocate = () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(position => {
                const newLocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                };
                setNewPinLocation(newLocation);
                setIsFormVisible(true);
            }, () => {
                alert("Could not get your location. Please allow location access.");
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    };

    const handleCancelForm = () => { setIsFormVisible(false); setNewPinLocation(null); };
    const handleShowForm = () => { setIsFormVisible(true); setNewPinLocation(null); };
    const handleLogin = (role) => { setUserRole(role); };

    // --- Main Render Logic ---
    const renderContent = () => {
        if (!userRole) {
            return <LoginPage onLogin={handleLogin} />;
        }
        if (userRole === 'resident') {
            return (
                <Dashboard
                    reports={reports}
                    isFormVisible={isFormVisible}
                    handleAddReport={handleAddReport}
                    handleCancelForm={handleCancelForm}
                    handleShowForm={handleShowForm}
                    handleGeolocate={handleGeolocate}
                />
            );
        }
        if (userRole === 'authority') {
            return (
                <AuthorityDashboard
                    reports={reports}
                    handleUpdateStatus={handleUpdateStatus}
                />
            );
        }
    };

    return (
        <>
            <StyleInjector />
            {renderContent()}
            <SuccessToast isVisible={isToastVisible} message={toastMessage} />
        </>
    );
}# crowdsourced-
